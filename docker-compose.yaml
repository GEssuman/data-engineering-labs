services:

  postgres_db:
    image: postgres:14
    restart: always
    container_name: real-time-spark-db
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts/sql:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
    networks:
      - real-time-network 




  broker:
    image: confluentinc/cp-kafka:7.9.0
    hostname: broker
    container_name: broker
    user: root
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_KRAFT_MODE: "true"

      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:9093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_LOG_DIRS: /var/lib/kafka/data 
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168


      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

      CLUSTER_ID: "kgaeiubflaukgfui"

    networks:
      - real-time-network


  control-center:
    image: confluentinc/cp-enterprise-control-center:7.9.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - real-time-network

  heart_rate_simulator:
    build:
      context: ./docker
      dockerfile: docker-python/Dockerfile
    container_name: heart-rate-simulator
    depends_on:
      - broker
    volumes:
      - ./scripts/python:/app
    env_file:
      - ./.env
    networks:
      - real-time-network
    command: ["python", "/app/heart_beat_simulator.py"]
     

  spark-master:
    image: spark-with-kafka:latest
    container_name: real-time-spark-master
    user: root
    ports:
      - "7077:7077"
      - "8080:8080"
    depends_on:
      - broker
    volumes:
      - ./spark/start_app.sh:/opt/spark/start_app.sh
      - ./spark/apps:/opt/spark/apps
      - ./spark/resources:/opt/spark/resources 
      - spark_checkpoints:/opt/spark/checkpoints
    environment:
      - SPARK_MODE=master
      - SPARK_LOCAL_IP=spark-master
    env_file:
      - ./.env
    networks:
      - real-time-network
    command: bash /opt/spark/start_app.sh


  spark-worker-1:
    image: spark-with-kafka:latest
    container_name: real-time-spark-worker
    user: root
    ports:
      - "7000:7000"
      - "8081:8081"
    depends_on:
      - spark-master
      - broker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    env_file:
      - ./.env
    volumes:
      - ./spark/apps:/opt/spark/apps
      - ./spark/resources:/opt/spark/resources 
      - spark_checkpoints:/opt/spark/checkpoints
    networks:
      - real-time-network

  spark-worker-2:
    image: spark-with-kafka:latest
    container_name: real-time-spark-worker-2
    user: root
    ports:
      - "7001:7001"
      - "8082:8082"
    depends_on:
      - spark-master
      - broker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    env_file:
      - ./.env
    volumes:
      - ./spark/apps:/opt/spark/apps
      - ./spark/resources:/opt/spark/resources 
      - spark_checkpoints:/opt/spark/checkpoints
    networks:
      - real-time-network


  grafana:
    image: grafana/grafana-oss:latest 
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin" 
    ports:
      - "3000:3000" 
    networks:
      - real-time-network
    volumes:
      - grafana_store:/var/lib/grafana
    depends_on:
      postgres_db:
        condition: service_healthy


networks:
  real-time-network:

volumes:
  pgdata:
  spark_checkpoints:
  grafana_store:
  

